# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: Default

steps:
# - task: AzureResourceManagerTemplateDeployment@3
#   inputs:
#     deploymentScope: 'Resource Group'
#     azureResourceManagerConnection: 'Azure subscription 1(961ea96e-ac1e-49d0-baae-b5156658e8ae)'
#     subscriptionId: '961ea96e-ac1e-49d0-baae-b5156658e8ae'
#     action: 'Create Or Update Resource Group'
#     resourceGroupName: 'ja-arm-intro-task'
#     location: 'West Europe'
#     templateLocation: 'Linked artifact'
#     csmFile: 'azureSATemplate.json'
#     overrideParameters: '-startIndex 3'
#     deploymentMode: 'Incremental'
# - task: AzureResourceManagerTemplateDeployment@3
#   inputs:
#     deploymentScope: 'Resource Group'
#     azureResourceManagerConnection: 'Azure subscription 1(961ea96e-ac1e-49d0-baae-b5156658e8ae)'
#     subscriptionId: '961ea96e-ac1e-49d0-baae-b5156658e8ae'
#     action: 'Create Or Update Resource Group'
#     resourceGroupName: 'ja-arm-intro-task'
#     location: 'West Europe'
#     templateLocation: 'Linked artifact'
#     csmFile: 'azureVMTemplate.json'
#     overrideParameters: '-adminUsername ja-azVM -adminPassword $(adminPassword)'
#     deploymentMode: 'Incremental'
- task: AzurePowerShell@5
  inputs:
    azureSubscription: 'Azure subscription 1(961ea96e-ac1e-49d0-baae-b5156658e8ae)'
    ScriptType: 'InlineScript'
    Inline: |
      Get-AzContext
      (Get-AzStorageAccountKey -ResourceGroupName "ja-arm-intro-task" -AccountName "storageaccount3rg").Value[0]
      (Get-AzStorageAccountKey -ResourceGroupName "ja-arm-intro-task" -AccountName "storageaccount4rg").Value[0]
    azurePowerShellVersion: 'LatestVersion'
- task: AzurePowerShell@5
  inputs:
    azureSubscription: 'Azure subscription 1(961ea96e-ac1e-49d0-baae-b5156658e8ae)'
    ScriptType: 'InlineScript'
    Inline: |
      $resourceGroupName = 'ja-arm-intro-task'
      $vmName = 'simple-vm'

      # Enable PowerShell Remoting
      $script = "Enable-PSRemoting -Force"
      Invoke-AzVMRunCommand -ResourceGroupName $resourceGroupName -Name $vmName -CommandId RunPowerShellScript -ScriptString "$script"

      # Copy Script to VM
      $localFilePath = 'testScript.ps1'
      $remoteFilePath = 'C:\testScriptOnVM.ps1'
      $vm = Get-AzVM -ResourceGroupName $resourceGroupName -Name $vmName
      # Copy-AzVMFile -VM $vm -SourcePath $localFilePath -DestinationPath $remoteFilePath -FileMode Overwrite

      # Establish a remote session to the VM
      Write-Host "gabi shater 111111"
      # Get the public IP or DNS name of the VM
      $publicIP = Get-AzPublicIpAddress -ResourceGroupName $resourceGroupName -Name myPublicIP
      Write-Host "gabi shater after publicIP"
      # Create a remote PowerShell session
      $session = New-PSSession -ComputerName $publicIP -Credential (Get-Credential)
      Write-Host "gabi shater after session"
      # Copy the file to the VM
      Copy-Item -Path $localFilePath -Destination $remoteFolderPath -ToSession $session
      Write-Host "gabi shater after copy-Item"
      # Close the remote session
      Remove-PSSession $session
      Write-Host "gabi shater after Remove-PSSession"
      Write-Host "gabi shater all the time"

      # Run Script on VM
      $remoteScriptPath = $remoteFilePath
      $scriptBlock = {
        param($scriptPath)
        Invoke-Expression -Command $scriptPath
      }
      Invoke-AzVMRunCommand -ResourceGroupName $resourceGroupName -Name $vmName -CommandId 'RunPowerShellScript' -ScriptPath $remoteScriptPath -Parameter @{ scriptPath = $remoteScriptPath } -VM $vm
    azurePowerShellVersion: 'LatestVersion'
  displayName: 'Deploy VM, Copy Script, and Run'

